<?xml version="1.0" encoding="UTF-8"?>
<part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="testing">
    <title>Testing</title>
    <chapter>
        <title>Bootique and Testing</title>
        
        <para>Bootique is uniquely suitable to be used as a test framework. Within a single test it
            allows you to start and stop multiple embedded stacks with distinct set of modules and
            distinct YAML configurations, making it a powerful tool for <emphasis>integration
                testing.</emphasis> Bootique core module and some other modules provide companion
            test extensions that contain reusable test stacks.</para>
    </chapter>
    <chapter>
        <title>Creating Test Stacks</title>
        <para>To use basic Bootique test framework, import the following module in the "test"
            scope:<programlisting language="xml">&lt;dependency>
	&lt;groupId>com.nhl.bootique&lt;/groupId>
	&lt;artifactId>bootique-test&lt;/artifactId>
	&lt;scope>test&lt;/scope>
&lt;/dependency></programlisting>For
            module-specific "companion" test frameworks (e.g. <code>bootique-jetty-test</code>),
            check documentation of those modules or GitHub.</para>
        <para>While there are a number of built-in and custom stacks that you can create, they
            usually fall into two broad categories - "foreground" - those that are running in the
            main test thread, and "background" - those that are running in an isolated thread pool
            (usually network services like Jetty). To create a foreground stack, use
                <code>BQTestFactory</code>, annotated with <code>@Rule</code> or
                <code>@ClassRule</code>:<programlisting language="java">public class ForegroundTest {
	
	@Rule
	public BQTestFactory testFactory = new BQTestFactory();

	@Test
	public void testXyz() {
		BQTestRuntime runtime = testFactory.newRuntime().build("--help");
		...
	}
}</programlisting>As
            you see, the test class declares a factory, and test methods can create
                <code>BQTestRuntime</code> instances with different command-line arguments,
            including commands (<code>--help</code> in this example), configuration file
                (<code>"--config=some.yml"</code>), etc. So your test runtime will behave just like
            a real Java app and will allow to verify various scenarios. </para>
        <para>If a stack requires a thread pool to run (e.g. we are starting a webserver), it needs
            to be started with <code>BQDaemonTestFactory</code> instead of
                <code>BQTestFactory</code>:<programlisting language="java">public class BackgroundTest {
	
	@Rule
	public BQDaemonTestFactory testFactory = new BQDaemonTestFactory();
	
	@Test
	public void testBackground() {
		BQDaemonTestRuntime runtime = testFactory.newRuntime().start("--server");
		... 
	}
}</programlisting></para>
        <para>You don't need to stop it explicitly. <code>BQDaemonTestFactory</code> will take care
            of it via JUnit lifecycle.</para>
        <para>The next thing you may want to do is to add various modules to the basic stack (either
            foreground or background). <code>testFactory.newRuntime()</code> returns a builder
            object that optionally takes a special "configurator" instance that can add new
            modules,each of those adding or overriding runtime
            services:<programlisting language="java">@Test
public void testAbc() {

	Consumer&lt;Bootique> configurator = (bootique) -> {
		bootique
			// ensure all classpath modules are included
			.autoLoadModules()
			// add an adhoc module specific to the test
			.module((binder) -> {
			   binder.bind(MyService.class).to(MyServiceImpl.class);
		       });
	};
	
	testFactory.newRuntime().configurator(configurator).build("--help");
	... 
}</programlisting></para>
        <para>In real test suites creating configurators for every test becomes unwieldy rather
            quickly. So consider subclassing <code>BQDaemonTestFactory</code> or
                <code>BQTestFactory</code> to reuse configurators common for your entire app.</para>
    </chapter>
    
    <chapter>
        <title>Common Test Scenarios</title>
        <para>Now that we can start stacks on foreground or background, we can finally write some
            tests. Some things that can be tested include runtime services with real dependencies,
            standard output of full Bootique applications (i.e. the stuff that would be printed to
            console if this were a real app), network services using real network connections (e.g.
            your REST API's), and so on. Some examples are given below, outlining common
            techniques.</para>
        <section>
            <title>Testing Services that are Part of Bootique Runtime</title>
            <para>Services can be obtained from test runtime, their methods called, and assertions
                made about the results of the call: </para>
            <para>
                <programlisting language="java">@Test
public void testService() {

	BQTestRuntime runtime = testFactory.newRuntime().build("--config=src/test/resources/my.yml");

	MyService service = runtime.getRuntime().getInstance(MyService.class);
	assertEquals("xyz", service.someMethod());
}</programlisting>
            </para>
        </section>
        <section>
            <title>Testing Network Services</title>
            <para>If a test stack is started on the background, and if runs a web server (like
                    <code>bootique-jetty-test</code>) or some other network service, it can be
                accessed via a URL.
                E.g.:<programlisting language="java">@Test
public void testServer() {

	BQDaemonTestRuntime runtime = testFactory.newRuntime().start("--server");

	// using JAX-RS client API
	WebTarget base = ClientBuilder.newClient().target("http://localhost:8080/");
	Response r1 = base.path("/somepath").request().get();
	assertEquals(Status.OK.getStatusCode(), r1.getStatus());
	assertEquals("{}", r1.readEntity(String.class));
}</programlisting></para>
        </section>
        <section>
            <title>Testing Commands</title>
            <para>You can emulate a real app execution in a unit test, by running a command and then
                checking the values of the exist code and <code>stdin</code> and <code>stderr</code>
                contents:<programlisting>@Test
public void testCommand() {
	BQTestRuntime runtime = app.newRuntime().build("--help");
	CommandOutcome outcome = runtime.run();

	assertEquals(0, outcome.getExitCode());

	String help = runtime.getStdout();
	assertTrue(help.contains("--help"));
	assertTrue(help.contains("--config"));
}</programlisting></para>
        </section>
        <section>
            <title>Testing Module Validity</title>
            <para>When you are writing your own modules, you may want to check that they are
                configured properly for autoloading (i.e.
                    <code>META-INF/services/com.nhl.bootique.BQModuleProvider</code> is present in
                the expected place and contains the right provider. There's a helper class to check
                for
                it:<programlisting>@Test
public void testPresentInJar() {
	BQModuleProviderChecker.testPresentInJar(MyModuleProvider.class);
}</programlisting></para>
        </section>
    </chapter>
 
   
</part>
