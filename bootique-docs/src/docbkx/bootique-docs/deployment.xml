<?xml version="1.0" encoding="UTF-8"?>
<part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="assembly-deployment">
    <title>Assembly and Deployment</title>
    <chapter xml:id="programming-runnable-jar">
        <title>Runnable Jar</title>
        <para>To build a runnable jar, Bootique relies on <code>maven-shade-plugin</code>. To
            simplfy its configuration, your app <code>pom.xml</code> may inherit from
                <code>bootique-parent</code> pom. In this case configuration would look like
            this:<programlisting language="xml">&lt;parent>
    &lt;groupId>io.bootique.parent&lt;/groupId>
    &lt;artifactId>bootique-parent&lt;/artifactId>
    &lt;version>0.12&lt;/version>
&lt;/parent>

...
&lt;build>
    &lt;plugins>
        &lt;plugin>
            &lt;groupId>org.apache.maven.plugins&lt;/groupId>
            &lt;artifactId>maven-shade-plugin&lt;/artifactId>
        &lt;/plugin>
    &lt;/plugins>
&lt;/build></programlisting></para>
        <para>This configuration will build an app with the framework-provided main class, namely
                <code>io.bootique.Bootique</code>. If you want to use a custom main class (and
            in most cases you do), you will need to redefine Maven <code>main.class</code>
            property:<programlisting language="java">&lt;properties>
    &lt;main.class>com.foo.Application&lt;/main.class>
&lt;/properties></programlisting></para>
        <para>If you want to avoid inheriting from the framework parent pom, you will need to
            explicitly provide the following unwieldy configuration similar to the one found in
                <link
                xlink:href="https://repo1.maven.org/maven2/io/bootique/parent/bootique-parent/0.12/bootique-parent-0.12.pom"
                    ><code>bootique-parent</code></link>:<programlisting language="java">&lt;plugin>
	&lt;groupId>org.apache.maven.plugins&lt;/groupId>
	&lt;artifactId>maven-shade-plugin&lt;/artifactId>
	&lt;version>2.4.2&lt;/version>

	&lt;configuration>
		&lt;createDependencyReducedPom>true&lt;/createDependencyReducedPom>
		&lt;filters>
			&lt;filter>
				&lt;artifact>*:*&lt;/artifact>
				&lt;excludes>
					&lt;exclude>META-INF/*.SF&lt;/exclude>
					&lt;exclude>META-INF/*.DSA&lt;/exclude>
					&lt;exclude>META-INF/*.RSA&lt;/exclude>
				&lt;/excludes>
			&lt;/filter>
		&lt;/filters>
	&lt;/configuration>
	&lt;executions>
		&lt;execution>
			&lt;phase>package&lt;/phase>
			&lt;goals>
				&lt;goal>shade&lt;/goal>
			&lt;/goals>
			&lt;configuration>
				&lt;transformers>
					&lt;transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
					&lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
						&lt;mainClass>${main.class}&lt;/mainClass>
					&lt;/transformer>
				&lt;/transformers>
			&lt;/configuration>
		&lt;/execution>
	&lt;/executions>
&lt;/plugin></programlisting></para>
        <para>Either way, once your pom is configured, you can assemble and run your jar.
            E.g.:<programlisting>mvn clean package
java -jar target/myapp-1.0.jar</programlisting></para>
    </chapter>
 
    <chapter xml:id="deployment-tracing">
        <title>Tracing Bootique Startup</title>
        <para>To see what modules are loaded and to trace other events that happen on startup, run
            your jar with <code>-Dbq.trace</code> option. E.g.:</para>
        <programlisting>java -Dbq.trace -jar target/myapp-1.0.jar --server</programlisting>
        <para>You may see an output like this:</para>
        <programlisting>Skipping module 'JerseyModule' provided by 'JerseyModuleProvider' (already provided by 'Bootique')...
Adding module 'BQCoreModule' provided by 'Bootique'...
Adding module 'JerseyModule' provided by 'Bootique'...
Adding module 'JettyModule' provided by 'JettyModuleProvider'...
Adding module 'LogbackModule' provided by 'LogbackModuleProvider'...</programlisting>
        
    </chapter>

</part>
